Qno.33
Search in Rotated Sorted Array

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.


solution: 
        approach : Binary search ,,, as usual take 2 pointers left and right 
                                          take mid = l+r /2 
                                          campare left half subarray and check target present in that , if present then return the index no
                                          else  check in right subarray .. do the same thing ... 

                                          if target is not present then return -1 and print targent not found



#python code:

      class Solution(object):
      def search(self, nums, target):
        l = 0
        r = len(nums)-1
                  
        while l <= r:
            mid = (l+r) // 2
        
            if nums[mid] == target  
                return mid
        
            if nums[mid] >= nums[l]:
                if nums[l] <=  target < nums[mid]:  #check for left sorted array
                    r = mid-1
                else:
                    l=mid+1

            else:
                if nums[mid] <  target <= nums[r]:  #check for right sorted array
                    l = mid+ 1
                else:
                    r = mid-1
                
        return -1 

